{"ast":null,"code":"var _jsxFileName = \"/Users/yanismeziane/Desktop/udemy/front/src/routes/form.js\",\n    _s = $RefreshSig$();\n\nimport '../form.css';\nimport axios from 'axios';\nimport React, { Component, useState } from 'react';\nimport env from \"react-dotenv\";\nimport { v4 as uuidv4 } from 'uuid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar CryptoJS = require(\"crypto-js\");\n\nconst FormData = require('form-data');\n\nfunction Form() {\n  _s();\n\n  const [selectedVideoFile, setSelectedVideoFile] = useState(null);\n  const [selectedImageFile, setSelectedImageFile] = useState(null);\n  const [title, setTitle] = useState('');\n  const [description, setDescription] = useState('');\n  const [content, setContent] = useState('');\n\n  const onVideoChange = event => {\n    setSelectedVideoFile(event.target.files[0]);\n  };\n\n  const onTitleChange = event => {\n    setTitle(event.target.value);\n  };\n\n  const onImageChange = event => {\n    setSelectedImageFile(event.target.files[0]);\n  };\n\n  const onDescriptionChange = event => {\n    setDescription(event.target.value);\n  };\n\n  const onContentChange = event => {\n    setContent(event.target.value);\n  };\n\n  const onFileUpload = () => {\n    const pinVideoFileToIPFS = async (pinataApiKey, pinataSecretApiKey) => {\n      const url = `https://api.pinata.cloud/pinning/pinFileToIPFS`;\n      let data = new FormData();\n      data.append('file', selectedVideoFile);\n      const metadata = JSON.stringify({\n        name: title,\n        content: content\n      });\n      data.append('pinataMetadata', metadata);\n      const pinataOptions = JSON.stringify({\n        cidVersion: 0,\n        customPinPolicy: {\n          regions: [{\n            id: 'FRA1',\n            desiredReplicationCount: 1\n          }, {\n            id: 'NYC1',\n            desiredReplicationCount: 2\n          }]\n        }\n      });\n      data.append('pinataOptions', pinataOptions);\n      const result = axios.post(url, data, {\n        maxBodyLength: 'Infinity',\n        //this is needed to prevent axios from erroring out with large files\n        headers: {\n          'Content-Type': `multipart/form-data; boundary=${data._boundary}`,\n          pinata_api_key: pinataApiKey,\n          pinata_secret_api_key: pinataSecretApiKey\n        }\n      }).then(function (response) {\n        console.log(response);\n        return 'https://ipfs.io/ipfs/' + response.data.IpfsHash;\n      }).catch(function (error) {\n        console.log(error);\n      });\n      return result;\n    };\n\n    const pinImageFileToIPFS = async (pinataApiKey, pinataSecretApiKey) => {\n      const url = `https://api.pinata.cloud/pinning/pinFileToIPFS`;\n      let data = new FormData();\n      data.append('file', selectedImageFile);\n      const metadata = JSON.stringify({\n        name: title,\n        description: description,\n        content: content\n      });\n      data.append('pinataMetadata', metadata);\n      const pinataOptions = JSON.stringify({\n        cidVersion: 0,\n        customPinPolicy: {\n          regions: [{\n            id: 'FRA1',\n            desiredReplicationCount: 1\n          }, {\n            id: 'NYC1',\n            desiredReplicationCount: 2\n          }]\n        }\n      });\n      data.append('pinataOptions', pinataOptions);\n      const result = axios.post(url, data, {\n        maxBodyLength: 'Infinity',\n        //this is needed to prevent axios from erroring out with large files\n        headers: {\n          'Content-Type': `multipart/form-data; boundary=${data._boundary}`,\n          pinata_api_key: pinataApiKey,\n          pinata_secret_api_key: pinataSecretApiKey\n        }\n      }).then(function (response) {\n        console.log(response);\n        return 'https://ipfs.io/ipfs/' + response.data.IpfsHash;\n      }).catch(function (error) {\n        console.log(error);\n      });\n      return result;\n    };\n\n    const pinJSONToIPFS = (pinataApiKey, pinataSecretApiKey, JSONBody) => {\n      const url = `https://api.pinata.cloud/pinning/pinJSONToIPFS`;\n      return axios.post(url, JSONBody, {\n        headers: {\n          pinata_api_key: pinataApiKey,\n          pinata_secret_api_key: pinataSecretApiKey\n        }\n      }).then(function (response) {\n        console.log(response);\n      }).catch(function (error) {//handle error here\n      });\n    };\n\n    async function main() {\n      const encryption_key = uuidv4();\n      console.log(encryption_key);\n      const ipfsVideoUrl = await pinVideoFileToIPFS(env.PINATA_KEY, env.PINATA_SECRET_KEY);\n      var ciphertext = CryptoJS.AES.encrypt(JSON.stringify(ipfsVideoUrl), encryption_key).toString();\n      const ipfsImageUrl = await pinImageFileToIPFS(env.PINATA_KEY, env.PINATA_SECRET_KEY);\n      const dataJson = {\n        'collection': {\n          'name': 'MICHI',\n          'description': 'MICHI is a new way to learn and share knowledge.',\n          'image': 'https://ipfs.io/ipfs/QmNyKyL9YssHQWGfAUGkigioZWDGZnEbBJHy8pcajmiC7G',\n          'slug': 'michi_learn'\n        },\n        'ipfs_video_url': ciphertext,\n        'metadata': {\n          'name': title,\n          'description': description,\n          'background_image': ipfsImageUrl\n        }\n      };\n      pinJSONToIPFS(env.PINATA_KEY, env.PINATA_SECRET_KEY, dataJson);\n    }\n\n    main();\n  };\n\n  const fileData = () => {\n    if (selectedVideoFile) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"File Details:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"File Name: \", selectedVideoFile.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"File Type: \", selectedVideoFile.type]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Last Modified:\", \" \", selectedVideoFile.lastModifiedDate.toDateString()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 9\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Choose before Pressing the Upload button\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 9\n      }, this);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Web3 Udemy\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Create your first course!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Title\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: title,\n        onChange: onTitleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Upload your video content\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        onChange: onVideoChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Description\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: description,\n        onChange: onDescriptionChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Upload a background image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        onChange: onImageChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Content\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"textarea\",\n        type: \"textarea\",\n        value: content,\n        onChange: onContentChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: onFileUpload,\n        children: \"Upload!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 7\n    }, this), fileData()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 211,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Form, \"HMVxBTrYDsNpvZykgUU1pSeNSg0=\");\n\n_c = Form;\nexport default Form;\n\nvar _c;\n\n$RefreshReg$(_c, \"Form\");","map":{"version":3,"sources":["/Users/yanismeziane/Desktop/udemy/front/src/routes/form.js"],"names":["axios","React","Component","useState","env","v4","uuidv4","CryptoJS","require","FormData","Form","selectedVideoFile","setSelectedVideoFile","selectedImageFile","setSelectedImageFile","title","setTitle","description","setDescription","content","setContent","onVideoChange","event","target","files","onTitleChange","value","onImageChange","onDescriptionChange","onContentChange","onFileUpload","pinVideoFileToIPFS","pinataApiKey","pinataSecretApiKey","url","data","append","metadata","JSON","stringify","name","pinataOptions","cidVersion","customPinPolicy","regions","id","desiredReplicationCount","result","post","maxBodyLength","headers","_boundary","pinata_api_key","pinata_secret_api_key","then","response","console","log","IpfsHash","catch","error","pinImageFileToIPFS","pinJSONToIPFS","JSONBody","main","encryption_key","ipfsVideoUrl","PINATA_KEY","PINATA_SECRET_KEY","ciphertext","AES","encrypt","toString","ipfsImageUrl","dataJson","fileData","type","lastModifiedDate","toDateString"],"mappings":"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","sourcesContent":["import '../form.css';\nimport axios from 'axios';\nimport React, { Component, useState } from 'react';\nimport env from \"react-dotenv\";\nimport { v4 as uuidv4 } from 'uuid';\nvar CryptoJS = require(\"crypto-js\");\nconst FormData = require('form-data');\n\nfunction Form() {\n\n  const [selectedVideoFile, setSelectedVideoFile] = useState(null);\n  const [selectedImageFile, setSelectedImageFile] = useState(null);\n  const [title, setTitle] = useState('');\n  const [description, setDescription] = useState('');\n  const [content, setContent] = useState('');\n\n  const onVideoChange = event => {\n    setSelectedVideoFile(event.target.files[0]);\n  };\n\n  const onTitleChange = event => {\n    setTitle(event.target.value)\n  }\n\n  const onImageChange = event => {\n    setSelectedImageFile(event.target.files[0]);\n  };\n\n  const onDescriptionChange = event => {\n    setDescription(event.target.value)\n  }\n\n  const onContentChange = event => {\n    setContent(event.target.value)\n  }\n\n  const onFileUpload = () => {\n\n    const pinVideoFileToIPFS = async (pinataApiKey, pinataSecretApiKey) => {\n      const url = `https://api.pinata.cloud/pinning/pinFileToIPFS`;\n      let data = new FormData();\n      data.append('file', selectedVideoFile);\n\n      const metadata = JSON.stringify({\n        name: title,\n        content: content,\n      });\n      data.append('pinataMetadata', metadata);\n\n      const pinataOptions = JSON.stringify({\n        cidVersion: 0,\n        customPinPolicy: {\n          regions: [\n            {\n              id: 'FRA1',\n              desiredReplicationCount: 1\n            },\n            {\n              id: 'NYC1',\n              desiredReplicationCount: 2\n            }\n          ]\n        }\n      });\n      data.append('pinataOptions', pinataOptions);\n\n      const result = axios\n        .post(url, data, {\n          maxBodyLength: 'Infinity', //this is needed to prevent axios from erroring out with large files\n          headers: {\n            'Content-Type': `multipart/form-data; boundary=${data._boundary}`,\n            pinata_api_key: pinataApiKey,\n            pinata_secret_api_key: pinataSecretApiKey\n          }\n        })\n        .then(function (response) {\n          console.log(response)\n          return 'https://ipfs.io/ipfs/' + response.data.IpfsHash\n        })\n        .catch(function (error) {\n          console.log(error)\n        });\n\n      return result\n    };\n\n    const pinImageFileToIPFS = async (pinataApiKey, pinataSecretApiKey) => {\n      const url = `https://api.pinata.cloud/pinning/pinFileToIPFS`;\n      let data = new FormData();\n      data.append('file', selectedImageFile);\n\n      const metadata = JSON.stringify({\n        name: title,\n        description: description,\n        content: content,\n      });\n      data.append('pinataMetadata', metadata);\n\n      const pinataOptions = JSON.stringify({\n        cidVersion: 0,\n        customPinPolicy: {\n          regions: [\n            {\n              id: 'FRA1',\n              desiredReplicationCount: 1\n            },\n            {\n              id: 'NYC1',\n              desiredReplicationCount: 2\n            }\n          ]\n        }\n      });\n      data.append('pinataOptions', pinataOptions);\n\n      const result = axios\n        .post(url, data, {\n          maxBodyLength: 'Infinity', //this is needed to prevent axios from erroring out with large files\n          headers: {\n            'Content-Type': `multipart/form-data; boundary=${data._boundary}`,\n            pinata_api_key: pinataApiKey,\n            pinata_secret_api_key: pinataSecretApiKey\n          }\n        })\n        .then(function (response) {\n          console.log(response)\n          return 'https://ipfs.io/ipfs/' + response.data.IpfsHash\n        })\n        .catch(function (error) {\n          console.log(error)\n        });\n\n      return result\n    };\n\n    const pinJSONToIPFS = (pinataApiKey, pinataSecretApiKey, JSONBody) => {\n      const url = `https://api.pinata.cloud/pinning/pinJSONToIPFS`;\n      return axios\n        .post(url, JSONBody, {\n          headers: {\n            pinata_api_key: pinataApiKey,\n            pinata_secret_api_key: pinataSecretApiKey\n          }\n        })\n        .then(function (response) {\n          console.log(response)\n        })\n        .catch(function (error) {\n          //handle error here\n        });\n    };\n\n    async function main() {\n      const encryption_key = uuidv4();\n      console.log(encryption_key)\n      const ipfsVideoUrl = await pinVideoFileToIPFS(env.PINATA_KEY, env.PINATA_SECRET_KEY);\n      var ciphertext = CryptoJS.AES.encrypt(JSON.stringify(ipfsVideoUrl), encryption_key).toString();\n      const ipfsImageUrl = await pinImageFileToIPFS(env.PINATA_KEY, env.PINATA_SECRET_KEY);\n      const dataJson = {\n        'collection': {\n          'name': 'MICHI',\n          'description': 'MICHI is a new way to learn and share knowledge.',\n          'image': 'https://ipfs.io/ipfs/QmNyKyL9YssHQWGfAUGkigioZWDGZnEbBJHy8pcajmiC7G',\n          'slug': 'michi_learn'\n        },\n        'ipfs_video_url': ciphertext,\n        'metadata': {\n          'name': title,\n          'description': description,\n          'background_image': ipfsImageUrl,\n        }\n      }\n      pinJSONToIPFS(env.PINATA_KEY, env.PINATA_SECRET_KEY, dataJson)\n    }\n\n    main();\n  };\n\n  const fileData = () => {\n\n    if (selectedVideoFile) {\n\n      return (\n        <div>\n          <h2>File Details:</h2>\n\n          <p>File Name: {selectedVideoFile.name}</p>\n\n\n          <p>File Type: {selectedVideoFile.type}</p>\n\n\n          <p>\n            Last Modified:{\" \"}\n            {selectedVideoFile.lastModifiedDate.toDateString()}\n          </p>\n\n        </div>\n      );\n    } else {\n      return (\n        <div>\n          <br />\n          <h4>Choose before Pressing the Upload button</h4>\n        </div>\n      );\n    }\n  };\n\n  return (\n    <div>\n      <h1>\n        Web3 Udemy\n      </h1>\n      <h3>\n        Create your first course!\n      </h3>\n      <div>\n        <label>Title</label>\n        <input type=\"text\" value={title} onChange={onTitleChange}></input>\n        <label>Upload your video content</label>\n        <input type=\"file\" onChange={onVideoChange} />\n        <label>Description</label>\n        <input type=\"text\" value={description} onChange={onDescriptionChange}></input>\n        <label>Upload a background image</label>\n        <input type=\"file\" onChange={onImageChange} />\n        <label>Content</label>\n        <input id=\"textarea\" type=\"textarea\" value={content} onChange={onContentChange}></input>\n        <br />\n        <button onClick={onFileUpload}>\n          Upload!\n        </button>\n      </div>\n      {fileData()}\n    </div>\n  );\n}\n\nexport default Form;"]},"metadata":{},"sourceType":"module"}