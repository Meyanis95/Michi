{"ast":null,"code":"var _jsxFileName = \"/Users/yanismeziane/Desktop/udemy/src/App.js\";\nimport './App.css';\nimport axios from 'axios';\nimport React, { Component } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst FormData = require('form-data');\n\nclass App extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      // Initially, no file is selected\n      selectedFile: null\n    };\n\n    this.onFileChange = event => {\n      // Update the state\n      this.setState({\n        selectedFile: event.target.files[0]\n      });\n    };\n\n    this.onFileUpload = () => {\n      // Create an object of formData\n      const formData = new FormData(); // Update the formData object\n\n      formData.append(\"myFile\", this.state.selectedFile, this.state.selectedFile.name); // Details of the uploaded file\n\n      console.log(this.state.selectedFile);\n      console.log(\"my data before\", formData); // Request made to the backend api\n      // Send formData object\n      //imports needed for this function\n\n      const pinFileToIPFS = (pinataApiKey, pinataSecretApiKey) => {\n        const url = `https://api.pinata.cloud/pinning/pinFileToIPFS`; //we gather a local file for this example, but any valid readStream source will work here.\n\n        let data = formData;\n        console.log(\"Ici c'est la data --------------------\");\n        console.log(data); //You'll need to make sure that the metadata is in the form of a JSON object that's been convered to a string\n        //metadata is optional\n\n        const metadata = JSON.stringify({\n          name: 'testname',\n          keyvalues: {\n            exampleKey: 'exampleValue'\n          }\n        });\n        data.append('pinataMetadata', metadata); //pinataOptions are optional\n\n        const pinataOptions = JSON.stringify({\n          cidVersion: 0,\n          customPinPolicy: {\n            regions: [{\n              id: 'FRA1',\n              desiredReplicationCount: 1\n            }, {\n              id: 'NYC1',\n              desiredReplicationCount: 2\n            }]\n          }\n        });\n        data.append('pinataOptions', pinataOptions);\n        return axios.post(url, data, {\n          maxBodyLength: 'Infinity',\n          //this is needed to prevent axios from erroring out with large files\n          headers: {\n            'Content-Type': `multipart/form-data; boundary=${data._boundary}`,\n            pinata_api_key: pinataApiKey,\n            pinata_secret_api_key: pinataSecretApiKey\n          }\n        }).then(function (response) {\n          console.log(response);\n        }).catch(function (error) {\n          console.log(error);\n        });\n      };\n\n      pinFileToIPFS('aa687437416fab07fb57', 'd53a9d7f8e914d6063621f1534c3e4c353f690255e89621084d2073744c44f8a');\n    };\n\n    this.fileData = () => {\n      if (this.state.selectedFile) {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"File Details:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"File Name: \", this.state.selectedFile.name]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"File Type: \", this.state.selectedFile.type]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Last Modified:\", \" \", this.state.selectedFile.lastModifiedDate.toDateString()]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 9\n        }, this);\n      } else {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Choose before Pressing the Upload button\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 9\n        }, this);\n      }\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"GeeksforGeeks\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"File Upload using React!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          onChange: this.onFileChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.onFileUpload,\n          children: \"Upload!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }, this), this.fileData()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/yanismeziane/Desktop/udemy/src/App.js"],"names":["axios","React","Component","FormData","require","App","state","selectedFile","onFileChange","event","setState","target","files","onFileUpload","formData","append","name","console","log","pinFileToIPFS","pinataApiKey","pinataSecretApiKey","url","data","metadata","JSON","stringify","keyvalues","exampleKey","pinataOptions","cidVersion","customPinPolicy","regions","id","desiredReplicationCount","post","maxBodyLength","headers","_boundary","pinata_api_key","pinata_secret_api_key","then","response","catch","error","fileData","type","lastModifiedDate","toDateString","render"],"mappings":"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","sourcesContent":["import './App.css';\nimport axios from 'axios';\nimport React, { Component } from 'react';\nconst FormData = require('form-data');\n\nclass App extends Component {\n  state = {\n\n    // Initially, no file is selected\n    selectedFile: null\n  };\n\n  // On file select (from the pop up)\n  onFileChange = event => {\n\n    // Update the state\n    this.setState({ selectedFile: event.target.files[0] });\n\n  };\n\n  // On file upload (click the upload button)\n  onFileUpload = () => {\n\n    // Create an object of formData\n    const formData = new FormData();\n\n    // Update the formData object\n    formData.append(\n      \"myFile\",\n      this.state.selectedFile,\n      this.state.selectedFile.name\n    );\n\n    // Details of the uploaded file\n    console.log(this.state.selectedFile);\n    console.log(\"my data before\", formData)\n\n    // Request made to the backend api\n    // Send formData object\n    //imports needed for this function\n\n    const pinFileToIPFS = (pinataApiKey, pinataSecretApiKey) => {\n      const url = `https://api.pinata.cloud/pinning/pinFileToIPFS`;\n\n      //we gather a local file for this example, but any valid readStream source will work here.\n      let data = formData\n      console.log(\"Ici c'est la data --------------------\")\n      console.log(data)\n\n      //You'll need to make sure that the metadata is in the form of a JSON object that's been convered to a string\n      //metadata is optional\n      const metadata = JSON.stringify({\n        name: 'testname',\n        keyvalues: {\n          exampleKey: 'exampleValue'\n        }\n      });\n      data.append('pinataMetadata', metadata);\n\n      //pinataOptions are optional\n      const pinataOptions = JSON.stringify({\n        cidVersion: 0,\n        customPinPolicy: {\n          regions: [\n            {\n              id: 'FRA1',\n              desiredReplicationCount: 1\n            },\n            {\n              id: 'NYC1',\n              desiredReplicationCount: 2\n            }\n          ]\n        }\n      });\n      data.append('pinataOptions', pinataOptions);\n\n      return axios\n        .post(url, data, {\n          maxBodyLength: 'Infinity', //this is needed to prevent axios from erroring out with large files\n          headers: {\n            'Content-Type': `multipart/form-data; boundary=${data._boundary}`,\n            pinata_api_key: pinataApiKey,\n            pinata_secret_api_key: pinataSecretApiKey\n          }\n        })\n        .then(function (response) {\n          console.log(response)\n        })\n        .catch(function (error) {\n          console.log(error)\n        });\n    };\n    pinFileToIPFS('aa687437416fab07fb57', 'd53a9d7f8e914d6063621f1534c3e4c353f690255e89621084d2073744c44f8a')\n  };\n\n  // File content to be displayed after\n  // file upload is complete\n  fileData = () => {\n\n    if (this.state.selectedFile) {\n\n      return (\n        <div>\n          <h2>File Details:</h2>\n\n          <p>File Name: {this.state.selectedFile.name}</p>\n\n\n          <p>File Type: {this.state.selectedFile.type}</p>\n\n\n          <p>\n            Last Modified:{\" \"}\n            {this.state.selectedFile.lastModifiedDate.toDateString()}\n          </p>\n\n        </div>\n      );\n    } else {\n      return (\n        <div>\n          <br />\n          <h4>Choose before Pressing the Upload button</h4>\n        </div>\n      );\n    }\n  };\n\n  render() {\n\n    return (\n      <div>\n        <h1>\n          GeeksforGeeks\n        </h1>\n        <h3>\n          File Upload using React!\n        </h3>\n        <div>\n          <input type=\"file\" onChange={this.onFileChange} />\n          <button onClick={this.onFileUpload}>\n            Upload!\n          </button>\n        </div>\n        {this.fileData()}\n      </div>\n    );\n  }\n}\n\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}