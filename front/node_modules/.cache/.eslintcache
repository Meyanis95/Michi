[{"/Users/yanismeziane/Desktop/udemy/front/src/index.js":"1","/Users/yanismeziane/Desktop/udemy/front/src/reportWebVitals.js":"2","/Users/yanismeziane/Desktop/udemy/front/src/App.js":"3","/Users/yanismeziane/Desktop/udemy/front/src/routes/form.js":"4","/Users/yanismeziane/Desktop/udemy/front/src/home.js":"5","/Users/yanismeziane/Desktop/udemy/front/src/helpers/db.js":"6"},{"size":702,"mtime":1643837994631,"results":"7","hashOfConfig":"8"},{"size":362,"mtime":1643827087086,"results":"9","hashOfConfig":"8"},{"size":146,"mtime":1643827087084,"results":"10","hashOfConfig":"8"},{"size":8075,"mtime":1643846055865,"results":"11","hashOfConfig":"8"},{"size":1786,"mtime":1643827087085,"results":"12","hashOfConfig":"8"},{"size":224,"mtime":1643827087085,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"17"},"uudxsg",{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"21"},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},"/Users/yanismeziane/Desktop/udemy/front/src/index.js",[],[],["36","37"],"/Users/yanismeziane/Desktop/udemy/front/src/reportWebVitals.js",[],[],["38","39"],"/Users/yanismeziane/Desktop/udemy/front/src/App.js",[],[],"/Users/yanismeziane/Desktop/udemy/front/src/routes/form.js",["40","41","42"],[],"import '../form.css';\nimport axios from 'axios';\nimport React, { Component, useState } from 'react';\nimport env from \"react-dotenv\";\nimport { v4 as uuidv4 } from 'uuid';\nimport { ethers } from \"ethers\";\nimport abi from \"../utils/CourseFactory.json\"\nvar CryptoJS = require(\"crypto-js\");\nconst FormData = require('form-data');\n\nfunction Form() {\n  const [selectedVideoFile, setSelectedVideoFile] = useState(null);\n  const [selectedImageFile, setSelectedImageFile] = useState(null);\n  const [title, setTitle] = useState('');\n  const [description, setDescription] = useState('');\n  const [content, setContent] = useState('');\n  const [price, setPrice] = useState(0);\n  const [currAccount, setCurrentAccount] = useState(\"\")\n  const contractAddress = \"0x50d0d47C2C08d5A70BC9bC29734a2f62bEe9Bc24\"\n  const contractABI = abi.abi\n\n  const onVideoChange = (event) => {\n    setSelectedVideoFile(event.target.files[0]);\n  };\n\n  const onTitleChange = (event) => {\n    setTitle(event.target.value);\n  };\n\n  const onImageChange = (event) => {\n    setSelectedImageFile(event.target.files[0]);\n  };\n\n  const onDescriptionChange = (event) => {\n    setDescription(event.target.value);\n  };\n\n  const onContentChange = (event) => {\n    setContent(event.target.value);\n  };\n\n  const onPriceChange = (event) => {\n    setPrice(event.target.value);\n  };\n\n  async function mintLesson(price, url) {\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const signer = provider.getSigner()\n    const waveportalContract = new ethers.Contract(contractAddress, contractABI, signer);\n\n    let course = await waveportalContract.createLesson(price, url);\n\n    console.log(\"cleaned\", course)\n  }\n\n  const onFileUpload = () => {\n    const pinVideoFileToIPFS = async (pinataApiKey, pinataSecretApiKey) => {\n      const url = `https://api.pinata.cloud/pinning/pinFileToIPFS`;\n      let data = new FormData();\n      data.append('file', selectedVideoFile);\n\n      const metadata = JSON.stringify({\n        name: title,\n        content: content,\n      });\n      data.append('pinataMetadata', metadata);\n\n      const pinataOptions = JSON.stringify({\n        cidVersion: 0,\n        customPinPolicy: {\n          regions: [\n            {\n              id: 'FRA1',\n              desiredReplicationCount: 1,\n            },\n            {\n              id: 'NYC1',\n              desiredReplicationCount: 2,\n            },\n          ],\n        },\n      });\n      data.append('pinataOptions', pinataOptions);\n\n      const result = axios\n        .post(url, data, {\n          maxBodyLength: 'Infinity', //this is needed to prevent axios from erroring out with large files\n          headers: {\n            'Content-Type': `multipart/form-data; boundary=${data._boundary}`,\n            pinata_api_key: pinataApiKey,\n            pinata_secret_api_key: pinataSecretApiKey,\n          },\n        })\n        .then(function (response) {\n          console.log(response);\n          return 'https://ipfs.io/ipfs/' + response.data.IpfsHash;\n        })\n        .catch(function (error) {\n          console.log(error);\n        });\n\n      return result;\n    };\n\n    const pinImageFileToIPFS = async (pinataApiKey, pinataSecretApiKey) => {\n      const url = `https://api.pinata.cloud/pinning/pinFileToIPFS`;\n      let data = new FormData();\n      data.append('file', selectedImageFile);\n\n      const metadata = JSON.stringify({\n        name: title,\n        description: description,\n        content: content,\n      });\n      data.append('pinataMetadata', metadata);\n\n      const pinataOptions = JSON.stringify({\n        cidVersion: 0,\n        customPinPolicy: {\n          regions: [\n            {\n              id: 'FRA1',\n              desiredReplicationCount: 1,\n            },\n            {\n              id: 'NYC1',\n              desiredReplicationCount: 2,\n            },\n          ],\n        },\n      });\n      data.append('pinataOptions', pinataOptions);\n\n      const result = axios\n        .post(url, data, {\n          maxBodyLength: 'Infinity', //this is needed to prevent axios from erroring out with large files\n          headers: {\n            'Content-Type': `multipart/form-data; boundary=${data._boundary}`,\n            pinata_api_key: pinataApiKey,\n            pinata_secret_api_key: pinataSecretApiKey,\n          },\n        })\n        .then(function (response) {\n          console.log(response);\n          return 'https://ipfs.io/ipfs/' + response.data.IpfsHash;\n        })\n        .catch(function (error) {\n          console.log(error);\n        });\n\n      return result;\n    };\n\n    const pinJSONToIPFS = (pinataApiKey, pinataSecretApiKey, JSONBody) => {\n      const url = `https://api.pinata.cloud/pinning/pinJSONToIPFS`;\n      return axios\n        .post(url, JSONBody, {\n          headers: {\n            pinata_api_key: pinataApiKey,\n            pinata_secret_api_key: pinataSecretApiKey,\n          },\n        })\n        .then(function (response) {\n          console.log(response);\n          return 'https://ipfs.io/ipfs/' + response.data.IpfsHash;\n        })\n        .catch(function (error) {\n          //handle error here\n        });\n    };\n\n    async function main() {\n      const encryption_key = uuidv4();\n      console.log(encryption_key)\n      const ipfsVideoUrl = await pinVideoFileToIPFS(env.PINATA_KEY, env.PINATA_SECRET_KEY);\n      var ciphertext = CryptoJS.AES.encrypt(JSON.stringify(ipfsVideoUrl), encryption_key).toString();\n      const ipfsImageUrl = await pinImageFileToIPFS(env.PINATA_KEY, env.PINATA_SECRET_KEY);\n      const dataJson = {\n        'collection': {\n          'name': 'MICHI',\n          'description': 'MICHI is a new way to learn and share knowledge.',\n          'image': 'https://ipfs.io/ipfs/QmNyKyL9YssHQWGfAUGkigioZWDGZnEbBJHy8pcajmiC7G',\n          'slug': 'michi_learn'\n        },\n        'ipfs_video_url': ciphertext,\n        'metadata': {\n          'name': title,\n          'description': description,\n          'background_image': ipfsImageUrl,\n        }\n      }\n      const uri = await pinJSONToIPFS(env.PINATA_KEY, env.PINATA_SECRET_KEY, dataJson)\n      mintLesson(price, uri)\n    }\n\n    main();\n  };\n\n  const fileData = () => {\n    if (selectedVideoFile) {\n      return (\n        <div>\n          <h2>File Details:</h2>\n\n          <p>File Name: {selectedVideoFile.name}</p>\n\n          <p>File Type: {selectedVideoFile.type}</p>\n\n          <p>\n            Last Modified: {selectedVideoFile.lastModifiedDate.toDateString()}\n          </p>\n        </div>\n      );\n    } else {\n      return (\n        <div>\n          <br />\n          <h4>Choose before Pressing the Upload button</h4>\n        </div>\n      );\n    }\n\n    // TO ADD hash to the db once we have the address of the contract + the generated hash, to run in the console while waiting\n    // const { data, error } = await supabase.from('lesson_hash').insert([\n    //   {\n    //     course_address: 'gingigg',\n    //     hash: 'ifongoingiogn',\n    //   },\n    // ]);\n    // if (error) {\n    //   console.log(error);\n    // } else {\n    //   console.log(data);\n    // }\n  };\n\n  return (\n    <div>\n      <h1>Web3 Udemy</h1>\n      <h3>Create your first course!</h3>\n      <div>\n        <label>Title</label>\n        <input type=\"text\" value={title} onChange={onTitleChange}></input>\n        <label>Upload your video content</label>\n        <input type=\"file\" onChange={onVideoChange} />\n        <label>Description</label>\n        <input\n          type=\"text\"\n          value={description}\n          onChange={onDescriptionChange}\n        ></input>\n        <label>Upload a background image</label>\n        <input type=\"file\" onChange={onImageChange} />\n        <label>Content</label>\n        <input\n          id=\"textarea\"\n          type=\"textarea\"\n          value={content}\n          onChange={onContentChange}\n        ></input>\n        <input\n          type=\"text\"\n          value={price}\n          pattern=\"[0-9]*\"\n          onChange={onPriceChange}\n        ></input>\n        <br />\n        <button onClick={onFileUpload}>Upload!</button>\n      </div>\n      {fileData()}\n    </div>\n  );\n}\n\nexport default Form;\n","/Users/yanismeziane/Desktop/udemy/front/src/home.js",["43","44","45"],[],"import React, { Component, useState, useEffect } from 'react';\nimport { BrowserRouter, Route, Link } from \"react-router-dom\";\n\nfunction Home() {\n\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n\n  const checkIfWalletIsConnected = async () => {\n    const { ethereum } = window;\n\n    if (!ethereum) {\n      console.log(\"Make sure you have metamask!\");\n      return;\n    } else {\n      console.log(\"We have the ethereum object\", ethereum)\n    }\n\n    const accounts = await ethereum.request({ method: 'eth_accounts' });\n\n    if (accounts.length !== 0) {\n      const account = accounts[0];\n      console.log(\"Found an authorized account:\", account);\n      setCurrentAccount(account)\n    } else {\n      console.log(\"No authorized account found\")\n    }\n\n  }\n\n  const connectWallet = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        alert(\"Get Metamask!\");\n        return\n      }\n\n      const accounts = await ethereum.request({ method: \"eth_requestAccounts\" });\n\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]);\n\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  const renderNotConnectedContainer = () => (\n    <button onClick={connectWallet} className=\"cta-button connect-wallet-button\">\n      Connect to Wallet\n    </button>\n  );\n\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  }, []);\n\n  return (\n    <div>\n      <h1>Welcome To Michi</h1>\n      <p>Connect your wallet to start your journey!</p>\n      {currentAccount === \"\" ? (\n        renderNotConnectedContainer()\n      ) : (\n        <div>\n          <p>Wallect connected!!</p>\n          <nav>\n            <Link to=\"/Form\">Create your first course</Link>\n          </nav>\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport default Home;","/Users/yanismeziane/Desktop/udemy/front/src/helpers/db.js",[],[],{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","replacedBy":"49"},{"ruleId":"46","replacedBy":"50"},{"ruleId":"48","replacedBy":"51"},{"ruleId":"52","severity":1,"message":"53","line":3,"column":17,"nodeType":"54","messageId":"55","endLine":3,"endColumn":26},{"ruleId":"52","severity":1,"message":"56","line":18,"column":10,"nodeType":"54","messageId":"55","endLine":18,"endColumn":21},{"ruleId":"52","severity":1,"message":"57","line":18,"column":23,"nodeType":"54","messageId":"55","endLine":18,"endColumn":40},{"ruleId":"52","severity":1,"message":"53","line":1,"column":17,"nodeType":"54","messageId":"55","endLine":1,"endColumn":26},{"ruleId":"52","severity":1,"message":"58","line":2,"column":10,"nodeType":"54","messageId":"55","endLine":2,"endColumn":23},{"ruleId":"52","severity":1,"message":"59","line":2,"column":25,"nodeType":"54","messageId":"55","endLine":2,"endColumn":30},"no-native-reassign",["60"],"no-negated-in-lhs",["61"],["60"],["61"],"no-unused-vars","'Component' is defined but never used.","Identifier","unusedVar","'currAccount' is assigned a value but never used.","'setCurrentAccount' is assigned a value but never used.","'BrowserRouter' is defined but never used.","'Route' is defined but never used.","no-global-assign","no-unsafe-negation"]